services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - PORT=${BACKEND_PORT}
    container_name: persona-ai-backend-prod
    env_file:
      - .env                    # Docker orchestration variables (ports, etc.)
      - ./backend/.env          # Backend-specific variables
    environment:
      - NODE_ENV=production
      - PORT=${BACKEND_PORT}
      # Database variables now come from backend/.env
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_DATABASE}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_ENCRYPT=${DB_ENCRYPT}
      - DB_TRUST_CERT=${DB_TRUST_CERT}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - persona-network
    restart: unless-stopped
    # No database dependency since using external database
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - FRONTEND_PORT=${FRONTEND_PORT}
        - BACKEND_PORT=${BACKEND_PORT}
    container_name: persona-ai-frontend-prod
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:${BACKEND_PORT}
    ports:
      - "${FRONTEND_PORT}:80"
    networks:
      - persona-network
    restart: unless-stopped
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

# No volumes needed for external database setup

networks:
  persona-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16